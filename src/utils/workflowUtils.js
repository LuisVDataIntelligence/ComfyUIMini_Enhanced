const path = require('path');
const fs = require('fs');
const logger = require('./logger');
const { autoGenerateMetadata } = require('./metadataUtils');
const config = require('config');

function serverWorkflowsCheck() {
    const serverWorkflowsFolderPath = path.join(__dirname, '..', '..', 'workflows');

    try {
        checkForWorkflowsFolder(serverWorkflowsFolderPath);
    } catch (error) {
        console.error('Error when checking for server workflows folder: ', error);
    }

    const jsonFileList = getWorkflowFolderJsonFiles(serverWorkflowsFolderPath);
    const serverWorkflowMetadata = getServerWorkflowMetadata(serverWorkflowsFolderPath, jsonFileList);

    config.serverWorkflowMetadata = serverWorkflowMetadata;
}

/**
 * Reads the server workflows folder for JSON files.
 * 
 * @param {string} serverWorkflowsFolderPath The path to the server workflows folder.
 * @returns 
 */
function getWorkflowFolderJsonFiles(serverWorkflowsFolderPath) {
    const filesList = fs.readdirSync(serverWorkflowsFolderPath);
    const jsonFilesList = filesList.filter((file) => path.extname(file).toLowerCase() === '.json');

    return jsonFilesList;
}

/**
 * Checks if the server workflows folder path exists, if not, tries to creates it.
 * @param {string} serverWorkflowsFolderPath The path to the server workflows folder.
 */
function checkForWorkflowsFolder(serverWorkflowsFolderPath) {
    if (!fs.existsSync(serverWorkflowsFolderPath)) {
        logger.warn(`Server workflows folder path from config not found, attempting to create...`);

        try {
            fs.mkdirSync(serverWorkflowsFolderPath);
            logger.success(`Server workflows folder created at '${serverWorkflowsFolderPath}'`);
        } catch (err) {
            console.error(`Error creating server workflows directory at path from config: ${err}`);
        }

        return;
    }

    return;
}
/**
 * Attempts to get text metadata for all workflows in the server workflows folder.
 *
 * @param {string} serverWorkflowsFolderPath The folder where the workflows are stored.
 * @param {string[]} jsonFileList List of JSON files in the workflows folder.
 * @returns {object} An object containing the metadata for each workflow.
 */
function getServerWorkflowMetadata(serverWorkflowsFolderPath, jsonFileList) {
    const serverWorkflowMetadata = {};

    for (const jsonFilename of jsonFileList) {
        const jsonFileContents = fs.readFileSync(path.join(serverWorkflowsFolderPath, jsonFilename), 'utf8');
        const parsedJsonContents = JSON.parse(jsonFileContents);

        const jsonMetadata = parsedJsonContents['_comfyuimini_meta'];

        if (!jsonMetadata) {
            try {
                generateWorkflowMetadataAndSaveToFile(parsedJsonContents, jsonFilename, serverWorkflowsFolderPath);
            } catch (error) {
                logger.error(`Error when auto-generating metadata for workflow '${jsonFilename}': ${error}`);
                continue;
            }

            serverWorkflowMetadata[`[CONVERTED] ${jsonFilename}`] = {
                title: jsonFilename,
                filename: `[CONVERTED] ${jsonFilename}`,
                description: 'Auto generated.',
            };

            continue;
        }

        serverWorkflowMetadata[jsonFilename] = {
            title: jsonMetadata.title,
            filename: jsonFilename,
            description: jsonMetadata.description,
        };
    }

    logger.info(`Found ${Object.keys(serverWorkflowMetadata).length} valid workflows in the workflow folder.`);

    return serverWorkflowMetadata;
}

/**
 * Auto-generates metadata for a workflow object and saves it to a new file with a [CONVERTED] prefix while keeping a backup of the original file.
 * 
 * @param {object} workflowObjectWithoutMetadata The workflow object without metadata.
 * @param {string} workflowFilename The filename of the workflow in the workflows folder.
 * @param {string} serverWorkflowsFolderPath The path to the workflows folder.
 */
function generateWorkflowMetadataAndSaveToFile(workflowObjectWithoutMetadata, workflowFilename, serverWorkflowsFolderPath) {
    if (config.auto_convert_comfyui_workflows === false) {
        return;
    }

    const autoGeneratedMetadata = autoGenerateMetadata(workflowObjectWithoutMetadata, workflowFilename, serverWorkflowsFolderPath);
    if (autoGeneratedMetadata === null) {
        logger.warn(`'${workflowFilename}' was not recognized as a valid ComfyUI workflow`);
        return;
    }

    const fullWorkflowMetadata = {
        ...workflowObjectWithoutMetadata,
        _comfyuimini_meta: autoGeneratedMetadata,
    };

    try {
        writeConvertedWorkflowToFile(fullWorkflowMetadata, workflowFilename, serverWorkflowsFolderPath);
    } catch (error) {
        logger.error(`Error when saving converted workflow to file: ${error}`);
        return;
    }

    logger.info(
        `Created auto-generated ComfyUIMini metadata for '${jsonFilename}', to disable this feature you can disable 'auto_convert_comfyui_workflows' in config.`
    );
}

/**
 * Saves a converted workflow to a new file with a [CONVERTED] prefix while keeping a backup of the original file.
 * 
 * @param {object} workflowObject The new workflow object with metadata.
 * @param {string} originalWorkflowFilename The original filename of the workflow.
 * @param {string} serverWorkflowsFolderPath The path to the workflows folder.
 */
function writeConvertedWorkflowToFile(workflowObject, originalWorkflowFilename, serverWorkflowsFolderPath) {
    fs.writeFileSync(
        path.join(serverWorkflowsFolderPath, `[CONVERTED] ${originalWorkflowFilename}`),
        JSON.stringify(workflowObject, null, 2),
        'utf8'
    );

    fs.renameSync(path.join(serverWorkflowsFolderPath, originalWorkflowFilename), path.join(serverWorkflowsFolderPath, `${originalWorkflowFilename}.bak`));
}


/**
 * 
 * @param {string} filename The server workflow filename.
 * @returns {object|string} The workflow object, or 'invalid' if the file is invalid, 'error' if there was an error.
 */
function readServerWorkflow(filename) {
    try {
        const workflowFilePath = path.join(__dirname, '..', '..', 'workflows', filename);
        const fileContents = fs.readFileSync(workflowFilePath);
        const workflowObject = JSON.parse(fileContents);

        return workflowObject;
    } catch (error) {
        if (error.code === 'ENOENT') {
            return 'invalid';
        }

        console.error('Error when reading workflow from file:', error);
        return 'error';
    }
}

/**
 * Saves a workflow object into a file in the server workflows folder.
 * 
 * @param {string} filename The filename to save the workflow to.
 * @param {object} workflowObject The workflow object to convert into a JSON and save.
 * @returns {boolean} Whether or not the workflow was successfully saved.
 */
function writeServerWorkflow(filename, workflowObject) {
    try {
        fs.writeFileSync(
            path.join(__dirname, '..', '..', 'workflows', filename),
            JSON.stringify(workflowObject, null, 2),
            'utf8'
        );
        return true;
    } catch (error) {
        console.error('Error when saving workflow to file:', error);
        return false;
    }
}

module.exports = {
    serverWorkflowsCheck,
    readServerWorkflow,
    writeServerWorkflow,
}